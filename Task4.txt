pragma solidity ^0.5.17;
//simpleToken Contract
contract SimpleToken {
    mapping(address => uint256) public accounts;
    
    function addMoney(uint256 intialAmount, address payable user)  public{
        accounts[user] += intialAmount;
    }
    function getBalance(address acc)  public returns(uint256){
        return accounts[acc];
    }
    function transfer(address payable sender, address payable recipient, uint256 amount) public{
       require(accounts[sender] >= amount, "ERROR!!!: Please make sure you have enough money to transfer!!!" );
       accounts[sender] = accounts[sender] - amount;
       accounts[recipient] = accounts[recipient] + amount;
    }
}
contract Escrow {
    SimpleToken public simpleToken;
    uint256 balance;
    address payable public buyer;
    address payable public seller;
    address payable public escrow;
    address payable public mediator;
    uint256 product_price;
    bool buyer_Agree;
    bool seller_Agree;
    bool dispute;
    uint256 lockedTime;
    constructor(address payable input_buyer, address payable input_seller, address payable input_escrow, address payable input_mediator, uint256 price) public {
        buyer = input_buyer;
        seller = input_seller;
        escrow = input_escrow;
        dispute = false;
        mediator = input_mediator;
        product_price = price;
        simpleToken = new SimpleToken();
    }
    function addMoney()public payable{
        require(msg.sender == buyer, "Error!!! Only buyer can add money!!!");
        if(msg.sender == buyer){
            require(msg.value / (10 ** 18) > product_price * 101 / 100, "ERROR!!!!!");
            simpleToken.addMoney(msg.value / (10**18), msg.sender);
        }
    }
    function getBalance(address payable user) public returns(uint256){
        uint256 val = simpleToken.getBalance(user);
        return val;
    }
    function ApproveTxSuccess() public payable  {
        if (msg.sender == buyer){
            buyer_Agree = true;
        } else if (msg.sender == seller){
            seller_Agree = true;
        }
        if (buyer_Agree && seller_Agree){
            simpleToken.transfer(escrow, seller, product_price);
            balance = balance - product_price;
            seller.transfer(product_price * (10 ** 18));
        }
    }
    
    function MakeDeposit() public payable {
        if (msg.sender == buyer) {
            uint256 payment;
            payment = product_price * 101 / 100;
            balance += payment;
            simpleToken.transfer(buyer, escrow, uint256(payment));
        }
    }
    function ApproveTxFail() public {
        if (msg.sender == buyer){
            buyer_Agree = false;
        } else if (msg.sender == seller){
            seller_Agree = false;
        }
        if(!buyer_Agree && !seller_Agree){
            simpleToken.transfer(escrow, buyer, product_price);
            balance = balance - product_price;
            buyer.transfer(address(this).balance / 101 * 100);
        }
        if((!buyer_Agree && seller_Agree) || (buyer_Agree && !seller_Agree)){
            TimeLocked();
        }
    }
    
    function Arbitrate(uint256 decision) public{
        //If the timeout is reached, simply refund the buyer
        if(now - lockedTime >= 120){
            simpleToken.transfer(escrow, buyer, product_price);
            balance = balance - product_price;
            buyer.transfer(address(this).balance / 101 * 100);
        }
        //Only the mediator can decide the state of the transaction
        if (msg.sender == mediator){
            if(dispute == true){
                if(decision == 1){  //make the transaction success
                    dispute = false;
                    simpleToken.transfer(escrow, seller, product_price);
                    balance = balance - product_price;
                    seller.transfer(address(this).balance / 101 * 100);
                }
                else if(decision == 2){//make the transaction failed
                    dispute = false;
                    simpleToken.transfer(escrow, buyer, product_price);
                    balance = balance - product_price;
                    buyer.transfer(address(this).balance / 101 * 100);
                }
            }
        }
    }
    
    function TimeLocked() private{
        dispute = true;
        lockedTime = now;
    }

}